======== DJANGO ========


SWEAT LESSONS:

- as imagens precisam ser armazenadas em static/nomedapasta 
para que o django as encontre e importe no html

- python manage.py runserver 9000 (pra rodar num servidor
que nao seja o 8000 padrão)

=========================================================	
====================== AULA 01 ==========================
=========================================================	

1 = criar pasta do projeto

2 = criar o venv 

	$ python3 -m venv 'nome'

3 = ativar o venv

	$ source venv/bin/activate

4 = instalar o django

	$ pip install django

5 = criar o projeto django

	$ django-admin startproject petwash_project .

6 = rodar o projeto django

	$ python manage.py runserver

6 = criar o app base

	$ python manage.py startapp base

===============================================================

	se tiver erro de importação, django.db, django.http e etc
	eh pq o vscode nao ta lendo pelo venv do projeto
	dar um command shift p
	>Python: Select Interpreter
	escolher o venv do projeto
	fonte: https://flaviocopes.com/error-unable-import-django-db/

===============================================================

	arquivos da pasta do app:

	views.py = as funcionalidades do projeto, se comunica com a urls.py do projeto
	tests.py = ali testa as funcionalidades do projeto
	models.py = estrutura de banco de dados
	admin.py = indica quais as models/tabelas ficam disponíveis pro usuário no painel administrativo
	apps.py = configuração do app

===============================================================

7 = ir no settings.py (projeto) e colocar o nome do app no

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
]

8 = ir no views e colocar a pagina 

	from django.shortcuts import render
	from django.http import HttpResponse

	def index(request):
		return render(request, 'index.html')

===============================================================
funcionalidades são no app
coisas gerais são no projeto
===============================================================

9 = dentro da pasta do app, criar a pasta templates e arquivo index.html

10 = e também a pasta static (pro css e js)




=========================================================	
====================== AULA 02 ==========================
=========================================================

- criar contact.html (botar no views.py e no urls.py)

<BOOTSTRAP SETUP>

-- $ pip install django-bootstrap-v5

-- colocar o bootstrap no settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
    'bootstrap5',
]

-- colocar o bootstrap no html da pagina

	<!doctype html>
	{% load bootstrap5 %}

	<link href="/static/starter-template.css" rel="stylesheet">
    <link href="/static/bootstrap.min.css" rel="stylesheet">
    <script src="/static/bootstrap.bundle.min.js"></script>


</BOOTSTRAP SETUP>

==========
No Django temos:

VARIÁVEIS = valores que ficarão disponíveis para serem exibidos no html

TEMPLATE TAGS = marcações especiais que irão realizar ações na página (if, for, while...)

FILTROS = alteram o conteúdo de exibição de uma variável
==========

Exemplo de criação de variável com dicionário:

NO VIEWS:

	def contact(request):
		context = {
			'phonenumber': '999999',
			'tutor': 'Maria'
		}
		return render(request, 'contact.html', context)

NO HTML:

	<p> 
		Envie uma mensagem através do formulário abaixo ou ligue para o telefone {{phonenumber}} e fale com o responsável {{tutor|upper}}.
	</p>

o |upper é um FILTRO, tem vários

------

No formulário, tem que colocar o method POST para enviar as informações:

<form method="POST">

(existe o método POST e o GET na web, métodos de envio e recebimento de informações)

abaixo do <form>, TEM QUE COLOCAR uma chave de segurança pra proteger de inputs maliciosos:

	{% csrf_token %}

------

colocar no views:

def contact(request):
    context = {
        'phonenumber': '999999',
        'tutor': 'Maria'
    }
	===============
    if request.method == 'POST':
        print(request.POST)
	==============
    return render(request, 'contact.html', context)

isso faz o sistema pegar as informações enviadas 


=========================================================	
====================== AULA 03 ==========================
=========================================================

SISTEMA DE FORMS 

1 = criar forms.py dentro da pasta base

	from django import forms

	class ContactForm(forms.Form):
		name = forms.CharField()
		email = forms.EmailField()
		message = forms.CharField(widget=forms.Textarea)


2 = ir no views.py e importar modulo

	from base.forms import ContactForm


3 = adicionar no def do contact:

	def contact(request):
		if request.method == 'GET':
			form = ContactForm()
		else:
			form = ContactForm(request.POST)

		responsible = {
			'responsible_number': '999999',
			'responsible_name': 'Maria',
			'form': form
		}
		if request.method == 'POST':
			print(request.POST)
		return render(request, 'contact.html', responsible)


4 = no mesmo arq, ir no html do formulario e colocar:

	<form action="" method="POST" id="form">
				{% csrf_token %}
-->				{% bootstrap_form form %}



5 = apagar o html antigo do form


6 = adicionar o novalidate na html do form 
	(ele torna o preenchimento de todos os campos obrigatórios)

	<form action="" method="POST" id="form" novalidate>


7 = para configurar mensagem de confirmação de envio, ir no views.py:

	def contact(request):
		success = False #######
		if request.method == 'GET':
			form = ContactForm()
		else:
			form = ContactForm(request.POST)
			if form.is_valid(): ##########
				success= True ###########

		responsible = {
			'responsible_number': '999999',
			'responsible_name': 'Maria',
			'form': form,
			'success': success ############
		}
		
		if request.method == 'POST':
			print(request.POST)
		return render(request, 'contact.html', responsible)


8 = e colocar no html:

	<form action="" method="POST" id="form" novalidate>
		{% csrf_token %}
		{% bootstrap_form form %}

		{% if success %} ###########

			<p class="alert alert-success"> Message sent successfully!</p> ########

		{% endif %} ##########

		<button type="submit" class="btn btn-primary">Send</button>	
   	</form>


=========================================================	
====================== AULA 04 ==========================
=========================================================

1 = escolher no index.html o que vai se repetir nas outras páginas e o conteúdo que é só do index.
	colocar esse conteúdo dentro das seguintes chaves:

	{% block main %}
	conteúdo
	{% endblock %}

2 = ir em uma página secundária, apagar todo o código que se repete na página (em relação ao index) 
	e deixar apenas seu conteúdo 

3 = colocar {% extends "index.html" %} na primeira linha de código

4 = deixar seu conteúdo dentro das chaves:

	{% block main %}
	conteúdo
	{% endblock %}


=========================================================	
====================== AULA 05 ==========================
=========================================================

CRIAÇÃO DO BANCO DE DADOS

ORM do Django permite fazer consultas sem escrever código SQL
classes python vao representar tabelas

1 = ir no settings.py e definir o banco de dados em DATABASE
	o sqlite já vem como default do django, dá pra adicionar outros se quiser

2 = $ python manage.py migrate
	criou varias tabelas dentro do sqlite3 que facilita a implementação
	migrate do banco de dados, são as atualizações
	cada vez que alterar algo no banco de dados, tem que dar esse comando
	
3 = abrir o db.sqlite3 no dbeaver e dar uma olhada nas tabelas que o comando criou
	auth_ tabelas de sistema do usuário

4 = ir no models.py e criar uma tabela para o form do contact.html:

	class Contact(models.Model):
		name = models.CharField(max_length=50)
		email = models.EmailField(max_length=50)
		message = models.TextField()
		data = models.DateTimeField(auto_now_add=True)

5 = $ python manage.py makemigrations

6 = $ python manage.py migrate
	verifica quais arquivos de migração de dados ainda não foram executados e os efetiva no banco de dados

7 = ir no views.py e importar:
	from base.models import Contact

8 = e também no views, adicionar:

	def contact(request):
    success = False
    if request.method == 'GET':
        form = ContactForm()
    else:
        form = ContactForm(request.POST)
        if form.is_valid():
            success = True
            name = form.cleaned_data['name']
            email = form.cleaned_data['email']
            message = form.cleaned_data['message']
            Contact.objects.create(name=name, email=email, message=message)
		
9 = ir no forms.py e atualizar:

	from django import forms
	from base.models import Contact  #######

	class ContactForm(forms.ModelForm):
		class Meta: #####
			model = Contact ########
			fields = ['name', 'email', 'message'] ##########

10 = ir no views.py e atualizar:

	def contact(request):
		success = False
		if request.method == 'GET':
			form = ContactForm()
		else:
			form = ContactForm(request.POST or None)
			if form.is_valid():
				success = True
				form.save()


=========================================================	
====================== AULA 06 ==========================
=========================================================

PARTE ADMINISTRATIVA DO DJANGO

1 = $ python manage.py createsuperuser

mwebster
imelissawebster@gmail.com
(senha)

2 = entrar na url com /admin e fazer login

	todo o CRUD pronto = Create Read Update Delete

3 = ir no admin.py e fazer a ligação com o bd:

	from django.contrib import admin
	from base.models import Contact, Booking

	@admin.register(Contact)
	class ContactAdmin(admin.ModelAdmin):
   		pass


4 = ir no models.py e alterar para deixar a lista no admin com nome e e-mail

	class Contact(models.Model):
		name = models.CharField(max_length=50)
		email = models.EmailField(max_length=50)
		message = models.TextField()
		data = models.DateTimeField(auto_now_add=True)
		def __str__(self):       #####
			return f'{self.name} [{self.email}]' #######


5 = adicionar contato no painel do admin


6 = ir no admin.py e adicionar:

	@admin.register(Contact)
	class ContactAdmin(admin.ModelAdmin):
		list_display = ['name', 'email', 'data']   ### divide a lista em campos
		search_fields = ['name', 'email']  ### insere um campo de busca
		list_filter = ['data'] #### coloca filtros de data

7 = atualizar no models.py:

	class Contact(models.Model):
    name = models.CharField(verbose_name='Name', max_length=50) ####
    email = models.EmailField(verbose_name='E-mail', max_length=50) ####
    message = models.TextField(verbose_name='Message') ####
    data = models.DateTimeField(verbose_name='Date sent', auto_now_add=True) #####
    def __str__(self):
        return f'{self.name} [{self.email}]'
    
    class Meta: ####
        verbose_name = 'Contact form' #####
        verbose_name_plural = 'Contact forms' #####
        ordering = ['-data'] ##### (aqui vai ordenar em ordem de data descendente)

-----
verbose_name é o nome que vai aparecer no painel pra nomear o elemento
(checar no painel pra ver o resultado)
-----

8 = ir no apps.py e atualizar:

	class BaseConfig(AppConfig):
		verbose_name = 'General Module'
		default_auto_field = 'django.db.models.BigAutoField'
		name = 'base'


=========================================================	
====================== AULA 07 ==========================
=========================================================

1 = ir no models.py e adicionar
	(para visualizar no admin se uma info foi lida ou não)

	class Contact(models.Model):
		name = models.CharField(verbose_name='Name', max_length=50)
		email = models.EmailField(verbose_name='E-mail', max_length=50)
		message = models.TextField(verbose_name='Message')
		data = models.DateTimeField(verbose_name='Date sent', auto_now_add=True)
		read = models.BooleanField(verbose_name='Read', default=False, blank=True) ######
		def __str__(self):
			return f'{self.name} [{self.email}]'
		
		class Meta:
			verbose_name = 'Contact form'
			verbose_name_plural = 'Contact forms'
			ordering = ['-data']


2 = desligar o servidor e dar um

	$ python manage.py makemigrations

	e depois

	$ python manage.py migrate


3 = ir no admin.py e avisar que esse novo campo vai aparecer no admin

	@admin.register(Contact)
	class ContactAdmin(admin.ModelAdmin):
		list_display = ['name', 'email', 'data', 'read'] #####
		search_fields = ['name', 'email']
		list_filter = ['data', 'read'] ####

4 = adicionar uma action no admin.py para poder marcar como lido

	from django.contrib import messages #####

	@admin.action(description='Mark contact form as read') ###
	def mark_as_read(modeladmin, request, queryset): ####
		queryset.update(read=True) ####
		modeladmin.message_user(request, 'Contact form marked as read', messages.SUCCESS) ####

	@admin.register(Contact)
	class ContactAdmin(admin.ModelAdmin):
		list_display = ['name', 'email', 'data', 'read']
		search_fields = ['name', 'email']
		list_filter = ['data', 'read']
		actions = [mark_as_read] ######

5 = CRIAR O APP da reserva

	$ python manage.py startapp booking

6 = registrar o booking no settings.py (projeto)

	INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
    'bootstrap5',
    'booking'
]

7 = ir no models.py do app booking e criar a tabela:

	class Booking(models.Model):
		SIZE_OPTIONS = (
			(0, 'Small'),
			(1, 'Medium'),
			(2, 'Big'),
		)
		SHIFT_OPTIONS = (
			('morning', 'Morning'),
			('afternoon', 'Afternoon'),
		)

		name = models.CharField(verbose_name='Name', max_length=50)
		email = models.EmailField(verbose_name='E-mail')
		pet_name = models.CharField(verbose_name='Pet name', max_length=50)
		date = models.DateField(verbose_name='Date', help_text='mm/dd/yyyy')
		shift = models.CharField(verbose_name='Shift', max_length=10, choices=SHIFT_OPTIONS)
		size = models.IntegerField(verbose_name='Size', choices=SIZE_OPTIONS)
		notes = models.TextField(blank=True)

		def __str__(self):
			return f'{self.name}: {self.date} - {self.shift}'

		class Meta:
			verbose_name = 'Bath booking'
			verbose_name_plural = 'Bath bookings'

8 = quit server e rodar:

	$ python manage.py makemigrations

	e depois

	$ python manage.py migrate

9 = ir no admin.py do app booking e importar as infos do bd no admin

	from django.contrib import admin
	from booking.models import Booking

	@admin.register(Booking)
	class BookingAdmin(admin.ModelAdmin):
		list_display = ['name', 'email', 'pet_name', 'date']
		search_fields = ['pet_name']
		list_filter = ['date', 'shift', 'size']

===============================================================

Geralmente quando criamos um novo app, o que precisamos pra que ele funcione:

#Model
#ModelForm
#View 
#Route 
#Template

===============================================================

10 = para fazer o form, criar o arquivo forms.py na pasta do app:

	from django import forms
	from booking.models import Booking

	class BookingForm(forms.ModelForm):
		class Meta:
			model = Booking
			fields = [
				'name', 'email', 'pet_name', 'date', 'shift', 'size', 'notes'
			]

11 = ir na views.py do booking:

	from django.shortcuts import render
	from booking.forms import BookingForm

	def create_booking(request):
		success = False
		form = BookingForm(request.POST or None)

		if form.is_valid(): 
			success = True
			form.save()

		responsible = {
			'form': form,
			'success': success
		}
		
		return render(request, 'booking.html', responsible)

12 = criar pasta templates dentro do app booking e colocar o booking.html

13 = ir no urls.py do projeto e adicionar o path booking

	from django.contrib import admin
	from django.urls import path, include ####
	from base.views import index, contact, booking, AboutUs, login


	#adicionar rotas do sistema
	urlpatterns = [
		path('', index),
		path('about-us/', AboutUs),
		path('booking/', include('booking.urls'), namespace='booking'), #####
		path('contact/', contact),
		path('login/', login),
		path('admin/', admin.site.urls),
]

14 = criar um novo arquivo urls.py dentro do app booking

15 = no novo urls.py: 

	from django.urls import path
	from booking.views import create_booking

	app_name = 'booking'
	urlpatterns = [
		path('create/', create_booking, name='create booking')

=========================================================	
====================== AULA 08 ==========================
=========================================================

1 = para validar a data escolhida pelo usuario (nao ser uma data do passado)ir no forms.py do booking e digitar:

	from django import forms
	from booking.models import Booking
	from datetime import date #####

	class BookingForm(forms.ModelForm): ######
		def clean_date(self):
			date = self.clean_date['date']
			today = date.today()
			if date < today:
				raise forms.ValidationError('You cannot book a bath on a day from the past.')
			return date

		class Meta:
			model = Booking
			fields = [
				'name', 'email', 'pet_name', 'date', 'shift', 'size', 'notes'
			]

2 = 


INSTALAR A API REST

1 = $ pip install djangorestframework

2 = $ python -m pip install djangorestframework

3 = ir no settings.py

	INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'base',
		'bootstrap5',
		'booking',
		'rest_framework', ######
	]

4 = no urls.py do projeto:

	urlpatterns = [
		path('', index),
		path('about-us/', AboutUs),
		path('booking/', include('booking.urls', namespace='booking')),
		path('contact/', contact),
		path('login/', login),
		path('admin/', admin.site.urls),
		path('api-auth/', include('rest_framework.urls')), ####
	]

5 = criar o app do rest_framework

	$ python manage.py startapp rest_api

6 = colocar 'rest_api', no settings do projeto

7 = views.py do rest_api:

	from django.shortcuts import render
	from rest_framework.decorators import api_view
	from rest_framework.response import Response

	@api_view(['GET', 'POST']) #essa api pode ser acessada pelos métodos get e post
	def hello_world(request):
		if request.method == 'POST':
			return Response({'message': f'Hello, {request.data.get("name")}'})
		return Response({'hello': 'world API'})


7 = criar urls.py no rest_api e colocar:

	from django.urls import path
	from rest_api.views import hello_world

	app_name = 'rest_api'
	urlpatterns = [
		path('hello_world', hello_world, name='hello_world_api'),
	]

8 = registrar no urls.py do projeto e registrar:



=========================================================	
====================== AULA 09 ==========================
=========================================================

1 = na views da api_rest

from django.shortcuts import render
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.viewsets import ModelViewSet
from booking.models import Booking
from rest_api.serializers import BookingModelSerializer

class BookingModelViewSet(ModelViewSet):
    queryset = Booking.objects.all()
    serializer_class = BookingModelSerializer

@api_view(['GET', 'POST']) #essa api pode ser acessada pelos métodos get e post
def hello_world(request):
    if request.method == 'POST':
        return Response({'message': f'Hello, {request.data.get("name")}'})
    return Response({'hello': 'world API'})


2 = criar serializers.py no root do api_rest

	from rest_framework.serializers import ModelSerializer
	from booking.models import Booking

	class BookingModelSerializer(ModelSerializer):
		class Meta:
			model = Booking
			fields = '__all__'


3 = criar a rota no urls.py do rest_api

	from django.urls import path
	from rest_api.views import hello_world, BookingModelViewSet #####
	from rest_framework.routers import SimpleRouter ######

	app_name = 'rest_api'
	router = SimpleRouter(trailing_slash=False) #False pra nao adicionar barra no final da URL ######
	router.register('booking', BookingModelViewSet) #########

	urlpatterns = [
		path('hello_world', hello_world, name='hello_world_api'),
	]

	urlpatterns += router.urls ########


4 = testar na url do localhost /api/booking


5 = para customizar a paginação do framework, ir no settings do projeto e adicionar:

	REST_FRAMEWORK = {
		'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
		'PAGE_SIZE': 10
	}


6 = $ pip install model-bakery (ajuda a testar paginação)


7 = criar no root do rest_api: management/commands/populate_booking.py


8 = nesse novo arquivo:

	from django.core.management.base import BaseCommand
	from model_bakery import baker
	from booking.models import Booking

	class Command(BaseCommand):
		help = 'create fake data to test API'
		def handle(self, *args, **options):
			total = 50
			self.stdout.write(
				self.style.WARNING(f'Creating {total} bookings')
			)
			for i in range(total):
            	booking = baker.make(Booking)
				booking.save()
			self.stdout.write(
				self.style.SUCCESS('Bookings created')
			)


9 = rodar $ python manage.py populate_booking
	e visualizar no browser


=========================================================	
====================== AULA 10 ==========================
=========================================================

ADICIONANDO PERMISSÕES AOS VIEWSETS (SEGURANÇA)

1 = no settings do projeto:
	adicionar 'rest_framework.authtoken'

2 = como uma nova tabela foi adicionada, dar migrate
	$ python manage.py migrate

3 = criar um arquivo create_token.py dentro de
	rest_api/management/commands

4 = colocar o código:

	from django.core.management.base import BaseCommand
	from django.contrib.auth.models import User
	from rest_framework.authtoken.models import Token

	class Command(BaseCommand):
		help = 'Creates a new token to be used'
		def add_arguments(self, parser):
			parser.add_argument('--username', required=True)
			parser.add_argument('--password', required=True)

		def handle(self, *args, **options):
			username = options['username']
			password = options['password']

			self.stdout.write(
				self.style.WARNING(f'Creating user {username}')
			)
			user = User(username=username)
			user.first_name = username
			user.set_password(password)
			user.save()

			self.stdout.write(
				self.style.SUCCESS(f'User created') 
			)
			self.stdout.write(
				self.style.WARNING(f'Creating a token for the user...')
			)
			token = Token.objects.create(user=user)
			self.stdout.write(
				self.style.SUCCESS(f'Token created: {token.key}')
			)

5 = $ python manage.py create_token --username petshop1 --password 123 

	676be81ffbca543800e6a140f203c1af05b34f81

6 = no rest_api/views.py:

	from django.shortcuts import render
	from rest_framework.decorators import api_view
	from rest_framework.response import Response
	from rest_framework.viewsets import ModelViewSet
	from booking.models import Booking
	from rest_api.serializers import BookingModelSerializer
	from rest_framework.authentication import TokenAuthentication #####
	from rest_framework.permissions import IsAuthenticated #####


class BookingModelViewSet(ModelViewSet):
    queryset = Booking.objects.all() 
    # faz o query no model, mas retorna um objeto
    serializer_class = BookingModelSerializer 
    #define qual serializer vai ser utilizado para tratar o objeto (e possibilitar um futuro json)
    authentication_classes = [TokenAuthentication]  ######
    #lista para aceitar as autenticações baseadas em token 
    permission_classes = [IsAuthenticated] ######
    #lista que vai autenticar as permissões que a views possui, só os usuários autenticados vão gerar endpoints pra api

	@api_view(['GET', 'POST']) #essa api pode ser acessada pelos métodos get e post
	def hello_world(request):
		if request.method == 'POST':
			return Response({'message': f'Hello, {request.data.get("name")}'})
		return Response({'hello': 'world API'})



=========================================================	
====================== AULA 11 ==========================
=========================================================
RELAÇÃO DE SERIALIZADORES


1 = Para que o usuário possa escolher em qual filial da PetWash ele quer marcar
o banho, criar a tabela Branch e uma foreign key dela na tabela Booking.

booking / models.py :

	from django.db import models


	class Booking(models.Model):
		SIZE_OPTIONS = (
			(0, 'Small'),
			(1, 'Medium'),
			(2, 'Big'),
		)
		SHIFT_OPTIONS = (
			('morning', 'Morning'),
			('afternoon', 'Afternoon'),
		)

		name = models.CharField(verbose_name='Name', max_length=50)
		email = models.EmailField(verbose_name='E-mail')
		pet_name = models.CharField(verbose_name='Pet name', max_length=50)
		date = models.DateField(verbose_name='Date', help_text='mm/dd/yyyy')
		shift = models.CharField(verbose_name='Shift', max_length=10, choices=SHIFT_OPTIONS)
		size = models.IntegerField(verbose_name='Size', choices=SIZE_OPTIONS)
		notes = models.TextField(blank=True, max_length=1000)

		branch = models.ForeignKey( ############
			'Branch', 
			related_name='what',
			on_delete=models.CASCADE,
			blank=True,
			null=True
			)

		def __str__(self):
			return f'{self.name}: {self.date} - {self.shift}'

		class Meta:
			verbose_name = 'Bath booking'
			verbose_name_plural = 'Bath bookings'
		

	class Branch(models.Model): #############
		name = models.CharField(verbose_name='Branch', max_length=50)
		street = models.CharField(verbose_name='Street', max_length=150)
		street_number = models.IntegerField(verbose_name='Street number')
		neighborhood = models.CharField(verbose_name='Neighborhood', max_length=50)


=========================================================
Mesmo que a foreign key seja obrigatória, deixar por enquanto 
como opcional para não dar conflito com os dados já existentes no BD.
=========================================================

2 = *** Inserir infos no BD pelo terminal ***

	$ python manage.py shell

	$ from booking.models import Branch

	$ Branch.objects.create(name='Downtown', street='Street One', street_number='01', neighborhood='Downtown')

	$ Branch.objects.create(name='Far Away', street='Street Two', street_number='02', neighborhood='Far Away')


3 = *** Editar reservas já existentes no BD pelo terminal ***

	$ from booking.models import Booking, Branch

	$ Downtown = Branch.objects.first()

	$ Booking.objects.all().update(branch=Far Away)

	$ quit()


4 = Fazer a serialização dessa nova tabela e referenciar tbm a foreign key na Booking

	rest_api / serializers.py :

	from rest_framework.serializers import ModelSerializer
	from booking.models import Booking, Branch ####


	class BranchModelSerializer(ModelSerializer): ######
		class Meta:
			model = Branch
			fields = '__all__'


	class BookingModelSerializer(ModelSerializer):
		branch = BranchModelSerializer(read_only=True) #####

		class Meta:
			model = Booking
			fields = '__all__'


5 = Testar no Postman



6 = 

	rest_api / views.py :

	from django.shortcuts import render
	from rest_framework.decorators import api_view
	from rest_framework.response import Response
	from rest_framework.viewsets import ModelViewSet
	from booking.models import Booking, Branch #####
	from rest_api.serializers import BookingModelSerializer, BranchModelSerializer ####

	from rest_framework.authentication import TokenAuthentication
	from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly ####


	class BranchModelViewSet(ModelViewSet): ######
		queryset = Branch.objects.all()
		serializer_class = BranchModelSerializer
		authentication_classes = [TokenAuthentication]
		permission_classes = [IsAuthenticatedOrReadOnly]


	class BookingModelViewSet(ModelViewSet):
		queryset = Booking.objects.all() 
		# faz o query no model, mas retorna um objeto
		serializer_class = BookingModelSerializer 
		#define qual serializer vai ser utilizado para tratar o objeto (e possibilitar um futuro json)
		authentication_classes = [TokenAuthentication] 
		#lista para aceitar as autenticações baseadas em token
		permission_classes = [IsAuthenticated] 
		#lista que vai autenticar as permissões que a views possui, só os usuários autenticados vão gerar endpoints pra api


	@api_view(['GET', 'POST']) #essa api pode ser acessada pelos métodos get e post
	def hello_world(request):
		if request.method == 'POST':
			return Response({'message': f'Hello, {request.data.get("name")}'})
		return Response({'hello': 'world API'})


7 = rest_api / serializers.py :

	from rest_framework.serializers import ModelSerializer, HyperlinkedRelatedField ####
	from booking.models import Booking, Branch


	class BranchModelSerializer(ModelSerializer): #####
		booking = HyperlinkedRelatedField(
			many = True,
			read_only = True,
			view_name='api:booking-detail'
		)
		
		class Meta:
			model = Branch
			fields = '__all__'


	class BookingModelSerializer(ModelSerializer):
		branch = BranchModelSerializer(read_only=True)

		class Meta:
			model = Booking
			fields = '__all__'

8 = definir a rota
	rest_api / urls.py :


=========================================================	
====================== AULA 12 ==========================
=========================================================

DJANGO TESTS - TESTANDO MODELOS, VIEWS, etc

1 = $ pip install pytest-django
	$ pip install pytest

2 = criar pytest.ini na pasta raiz (mesma do manage.py)

	[pytest]
	DJANGO_SETTINGS_MODULE = petwash_project.settings
	python_files = tests.py test_*.py *_test.py

3 = na pasta booking, excluir tests.py e criar uma pasta tests com os arqs: __init__.py e 
	test_models.py:

	from datetime import date
	import pytest
	from model_bakery import baker
	from booking.models import Booking


	#fixture faz com que a função possa ser usada como parâmetro em outros testes
	@pytest.fixture
	def booking():
		booking = baker.make(
			Booking,
			name = 'Floki',
			date = date.today(),
			shift = 'Morning'
		)
		return booking


	@pytest.mark.django_db
	def test_booking_should_return_string_format(booking):
		assert str(booking) == f'Floki: {date.today()} - Morning'

4 = dentro da mesma pasta tests, criar test_views.py:

	
=========================================================	
====================== AULA 13 ==========================
=========================================================

DJANGO TESTS - TESTANDO A API

1 = criar na pasta da API uma pasta tests com test_views.py e __init__.py dentro dela

2 = excluir o tests.py do root da pasta api

3 = no test_views.py:

	import pytest
	from rest_framework.test import APIClient

	@pytest.mark.django_db
	def test_all_petshops():
		client = APIClient()
		answer = client.get('/api/booking')
		assert len(answer.data['results']) == 0

4 = criar o test_serializers.py:

	import pytest
	import datetime
	from model_bakery import baker
	from booking.models import Booking
	from rest_api.serializers import BookingModelSerializer

	@pytest.fixture
	def wrong_booking_data():
		yesterday = datetime.date.today() - datetime.timedelta(days=1)
		booking = baker.make(Booking)
		return {
			'name': 'test name',
			'email': 'email@email.com',
			'pet_name': 'pet name',
			'date': yesterday,
			'shift': 'morning',
			'size': 0,
			'notes': 'blabla blabla',
			'booking': booking.pk,
		}

	@pytest.mark.django_db
	def test_invalid_booking_date(wrong_booking_data):
		serializer = BookingModelSerializer(data=wrong_booking_data)
		assert not serializer.is_valid()

5 = o teste vai dar errado, e é isso mesmo
	é porque a lógica da validação está em outra pasta (no forms.py do booking)

6 = para isso, ir no serializers.py e atualizar:

	import datetime
	from rest_framework.serializers import (
		ModelSerializer, 
		HyperlinkedRelatedField,
		PrimaryKeyRelatedField,
		ValidationError
	)
	from booking.models import Booking, Branch


	class BranchModelSerializer(ModelSerializer):
		booking = HyperlinkedRelatedField(
			many = True,
			read_only = True,
			view_name='api:booking-detail'
		)

		class Meta:
			model = Branch
			fields = '__all__'


	class BranchRelatedCustomSerializer(PrimaryKeyRelatedField):
		def __init__(self, **kwargs):
			self.serializer = BranchModelSerializer
			super().__init__(**kwargs)

		def use_pk_only_optimization(self):
			return False
		
		def to_representation(self, value):
			return self.serializer(value, context=self.context).data


	class BookingModelSerializer(ModelSerializer):
		branch = BranchRelatedCustomSerializer(
			queryset = Branch.objects.all(),
			read_only=False
		)

		def validate_data(self, value):
			today = datetime.date.today()
			if value < today:
				raise ValidationError('You cannot book a bath on a past day.')
			return value
		
		class Meta:
			model = Booking
			fields = '__all__'


=========================================================	
====================== AULA 14 ==========================
=========================================================
COMANDOS NO DJANGO

desafio: fazer um comando que sorteia algum cliente para receber cupom de agendamento grátis


1 = dentro de booking, criar a pasta management e commands dentro dela

2 = criar bath_prize.py:

	# Code to raffle a client to receive a free bath

	from django.core.management.base import BaseCommand, CommandParser
	from booking.models import Branch
	import random


	class Command(BaseCommand):
		def list_branches(self):
			return Branch.objects.all().values_list('pk', flat=True)
		
		def add_arguments(self, parser):
			parser.add_argument(            
				'quantity', # means flag
				nargs = '?', # means not mandatory
				default=5, # if user doesnt specify quantity, it gets 5 by default
				type=int,
				help='How many clients can participate?'
			)
			parser.add_argument(            
				'-branch',
				required=True,
				type=int,
				choices=self.list_branches(),
				help='Type the ID of the branch to run the raffle'
			)

		def choose_bookings(self, baths, quantity):
			baths_list = list(baths)
			if quantity > len(baths_list):
				quantity = len(baths_list)
			return random.sample(baths_list, quantity)
		
		def print_chosen_baths(self, baths):
			self.stdout.write()
			self.stdout.write(
				self.style.HTTP_INFO('Dados das pessoas e animais sorteados')
			)
			self.stdout.write(self.style.HTTP_INFO('='*35))
			
			for bath in baths:
				self.stdout.write(self.style.HTTP_INFO(f'Pet: {bath.pet_name}'))
				self.stdout.write(self.style.HTTP_INFO(f'Tutor: {bath.name}'))
				self.stdout.write(self.style.HTTP_INFO('='*35))

		def print_info_petshop(self, branch):
			self.stdout.write(
				self.style.HTTP_INFO(
					'Infos about the branch who ran the promo'
				)
			)
			self.stdout.write(f'Branch name: {branch.name}')
			self.stdout.write(f'Address: {branch.street}, {branch.street_number}')

		def handle(self, *args, **options):
			quantity = options['quantity']
			branch_id = options['branch']

			branch = Branch.objects.get(pk=branch_id)
			bookings = branch.branch.all()
			chosen_baths = self.choose_bookings(bookings, quantity)

			self.stdout.write(
				self.style.SUCCESS('Sorteio realizado')
			)
			self.print_info_petshop(branch)
			self.print_chosen_baths(chosen_baths)


3 = exemplo de comando para rodar: 

	$ python manage.py bath_prize 1 -branch 2


=========================================================	
====================== AULA 15 ==========================
=========================================================